
##############################################################################################################
# The pipelines are divided  into two categories:
#   corr - implying that the pipeline is testing the correctness of the node
#   perf - implying that the pipeline is testing the performance of the node
##############################################################################################################

##############################################################################################################
# Snapshoted data are prepared (on other server than drone, you need to have there actual tezos-node binary):
#
# - create/get snapshot:
#   1. download it from xtz-shots.io, e.g.: `wget https://<testnet>.xtz-shots.io/tezos-<testnet>-<some-level>.full`
#   2. or run node and create snapshot manually to desired level (recomended, you can set set level high):
#     ./tezos-node config init --network granadanet --data-dir /tmp/chain-data
#     ./tezos-node run --network granadanet --data-dir /tmp/chain-data --net-addr 0.0.0.0:9734 --rpc-addr 0.0.0.0:18888 --history-mode archive
#     ./tezos-node snapshot export --block BKyjtcb7VhJfTcqXWjf3p1beRmLVvMQsy5NvRJkPaVUkc6kx4e1 granadanet.20000.full --data-dir /tmp/chain-data/
#
# - import snapshot:
#   ./tezos-node config init --network granadanet --data-dir /tmp/granadanet
#   ./tezos-node snapshot import granadanet.20000.full --data-dir /tmp/granadanet  --reconstruct --network granadanet --history-mode full
#   cd /tmp/granadanet
#   tar -czvf granadanet.20000.snapshoted.tar.gz context store config.json version.json
#   # copy to drone server (see synchronize_ci.sh -> CI_HOSTS)
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.66:/usr/local/etc/tezedge-ci/snapshots
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.67:/usr/local/etc/tezedge-ci/snapshots
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.68:/usr/local/etc/tezedge-ci/snapshots
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.69:/usr/local/etc/tezedge-ci/snapshots
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.70:/usr/local/etc/tezedge-ci/snapshots
#
# - Drone server - extract and prepare dirs:
#   cd /usr/local/etc/tezedge-ci/snapshots
#   mkdir /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1 /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-2 /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-3
#   tar -xzvf granadanet.20000.snapshoted.tar.gz -C /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/
#   # check directory `/usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/`, should looks like this:
#     /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/config.json
#     /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/version.json
#     /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/context
#     /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/store
#   cp -R /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/* /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-2
#   cp -R /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/* /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-3
##############################################################################################################

##############################################################################################################
# This pipeline builds a docker image and pushes it to docker HUB - (versioned/tagged) from master/release
##############################################################################################################
kind: pipeline
name: deployment/publish-docker-image-latest-release

steps:
  - name: build-light-node-image
    image: plugins/docker
    settings:
      repo: tezedge/tezedge
      target: light-node
      tags:
        - ${DRONE_TAG}
        - latest-release
      dockerfile: docker/distroless/Dockerfile
      build_args:
        - SOURCE_BRANCH=${DRONE_TAG}
      username:
        from_secret: docker_hub_username
      password:
        from_secret: docker_hub_pswd

  - name: build-light-node-debug-image
    image: plugins/docker
    settings:
      repo: tezedge/tezedge
      target: light-node
      tags:
        - ${DRONE_TAG}-frame-pointers-enabled
        - latest-frame-pointers-enabled-release
      dockerfile: docker/distroless/Dockerfile
      build_args:
        - SOURCE_BRANCH=${DRONE_TAG}
        - BASE_IMAGE=tezedge/tezedge-libs:latest-profile
        - RUSTFLAGS=-Cforce-frame-pointers=yes
      username:
        from_secret: docker_hub_username
      password:
        from_secret: docker_hub_pswd

  - name: build-sandbox-image
    image: plugins/docker
    settings:
      repo: tezedge/tezedge
      target: sandbox
      tags:
        - sandbox-${DRONE_TAG}
        - sandbox-latest-release
      dockerfile: docker/distroless/Dockerfile
      build_args:
        - SOURCE_BRANCH=${DRONE_TAG}
      username:
        from_secret: docker_hub_username
      password:
        from_secret: docker_hub_pswd

  - name: build-monitoring-image
    image: plugins/docker
    settings:
      repo: tezedge/node-monitoring
      tags:
        - ${DRONE_TAG}
        - latest-release
      dockerfile: apps/node_monitoring/Dockerfile
      build_args:
        - SOURCE_BRANCH=${DRONE_TAG}
      username:
        from_secret: docker_hub_username
      password:
        from_secret: docker_hub_pswd

image_pull_secrets:
  - docker_pull_secret

trigger:
  ref: refs/tags/**
  event: tag

##############################################################################################################
# This pipeline:
# - only one which checkouts git
# - runs just run tests, and build artifacts to 'build' volume,
# - aslo copies files needed from git for other pipelines
##############################################################################################################
---
kind: pipeline
name: build-tezedge-binaries

trigger:
  branch:
    - master
    - develop

workspace:
  path: /drone/src

steps:

- name: build-artifacts
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v11.0-octez
  pull: if-not-exists
  user: root
  environment:
    RUST_BACKTRACE: 1
    SODIUM_USE_PKG_CONFIG: 1
    OCAML_BUILD_CHAIN: remote
    LOG_LEVEL: info
    OCAML_LOG_ENABLED: false
  commands:
    # prepare rust toolchain dir
    - echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib"
    # build and unit-test
    - cargo clean
    - cargo build --release --workspace
    - cargo test --release --workspace --no-run
    # collect binary artefacts
    # directory in the workspace to cache all the binary artefacts
    # TODO: use snake-case for directories
    - mkdir -p drone-cache/build_files/ffi
    - mkdir -p drone-cache/build_files/tezedge
    - mkdir -p drone-cache/build_files/identities
    - mkdir -p drone-cache/test_data/tests/resources
    - mkdir -p drone-cache/tests
    - mkdir -p drone-cache/sandbox_files
    # - mkdir -p $${SANDBOX_ARTIFACTS_PATH}
    # copy binaries
    - cp ./target/release/light-node drone-cache/build_files
    - cp ./target/release/sandbox drone-cache/build_files
    - cp ./target/release/protocol-runner drone-cache/build_files
    - cp ./tezos/sys/lib_tezos/artifacts/libtezos.so drone-cache/build_files/ffi
    - cp ./sandbox/artifacts/tezos-client drone-cache/build_files
    # copy sapling init files
    - cp ./tezos/sys/lib_tezos/artifacts/sapling-spend.params drone-cache/build_files/ffi
    - cp ./tezos/sys/lib_tezos/artifacts/sapling-output.params drone-cache/build_files/ffi
    # copy sandbox resources
    - cp ./light_node/etc/tezedge_sandbox/sandbox-patch-context.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/006-carthage-protocol-parameters.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/008-edo-protocol-parameters.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/009-florence-protocol-parameters.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/010-granada-protocol-parameters.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/011-hangzhou-protocol-parameters.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/tezedge_drone_sandbox.config drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_start_light_node_args.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_init_client_request.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_activate_protocol_request.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_activate_protocol_009_request.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_activate_protocol_010_request.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_activate_protocol_011_request.json drone-cache/sandbox_files
    - cp ./light_node/etc/tezedge_sandbox/sandbox_bake_empty_block.json drone-cache/sandbox_files
    # copy other resources
    - cp ./light_node/etc/drone/assert_equals.sh drone-cache/build_files/ && chmod 755 drone-cache/build_files/assert_equals.sh
    - cp ./light_node/etc/drone/assert_contains.sh drone-cache/build_files/ && chmod 755 drone-cache/build_files/assert_contains.sh
    - cp ./light_node/etc/drone/wait_file.sh drone-cache/build_files/ && chmod 755 drone-cache/build_files/wait_file.sh
    - cp ./light_node/etc/drone/assert_cyclic_test_result.sh drone-cache/build_files/ && chmod 755 drone-cache/build_files/assert_cyclic_test_result.sh
    - cp ./light_node/etc/drone/identities/* drone-cache/build_files/identities/
    - cp ./light_node/etc/tezedge/tezedge_drone.config drone-cache/build_files/tezedge/
    # copy test binaries
    - cp `find ./target/release/deps/ | grep integration_test | grep -v "\.d" | head -1` drone-cache/tests/rpc_integration_test
    # collect modified python tests stuff
    - mkdir -p drone-cache/python-tests/daemons
    - mkdir -p drone-cache/python-tests/launchers
    - mkdir -p drone-cache/python-tests/tools
    - cp -r ./tezos/python-tests/daemons/node.py drone-cache/python-tests/daemons/node.py
    - cp -r ./tezos/python-tests/launchers/sandbox.py drone-cache/python-tests/launchers/sandbox.py
    - cp -r ./tezos/python-tests/tools/constants.py drone-cache/python-tests/tools/constants.py

- name: rebuild-artifacts-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    rebuild: true
    backend: "sftp"
    cache_key: 'build-{{ .Build.Number }}'
    mount:
      - 'drone-cache' # <- builds a cache from this directory

---
##############################################################################################################
# This pipeline:
# - only one which checkouts git
# - runs just run tests, and build artifacts to 'build' volume,
# - aslo copies files needed from git for other pipelines
##############################################################################################################
kind: pipeline
name: build-old-tezedge-binaries

trigger:
  branch:
    - master
    - develop
  ref:
    - refs/pull/*/head

workspace:
  path: /drone/src

steps:

- name: build-artifacts
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v11.0-octez
  user: root
  environment:
    RUST_BACKTRACE: 1
    SODIUM_USE_PKG_CONFIG: 1
    OCAML_BUILD_CHAIN: remote
    LOG_LEVEL: info
    OCAML_LOG_ENABLED: false
  commands:
    # Build target (old) branch version
    - git reset --hard origin/${DRONE_TARGET_BRANCH}
    - cargo clean && cargo build --release -p light-node -p sandbox -p protocol-runner
    # copy old binaries
    - mkdir -p drone-cache-old
    - cp ./target/release/light-node drone-cache-old/
    - cp ./target/release/sandbox drone-cache-old/
    - cp ./target/release/protocol-runner drone-cache-old/
    - cp ./tezos/sys/lib_tezos/artifacts/libtezos.so drone-cache-old/
    - cp ./light_node/etc/tezedge/tezedge_drone.config drone-cache-old/
    # - chown -R 1000:1000 drone-cache

- name: rebuild-artifacts-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    rebuild: true
    backend: "sftp"
    cache_key: 'build-old-{{ .Build.Number }}'
    mount:
      - 'drone-cache-old' # <- builds a cache from this directory

---
##############################################################################################################
# This pipeline runs tezedge node with sandbox configuration with 011 Hangzhou protocol
# and ensures that endorsing works properly when two blocks are baked for the same level
# close to each other.
#
# GIVEN that we run tezedge in sandbox mode with 011-hangzhou protocol WHEN it receives two different heads
# THEN it successfully endorse the first one
##############################################################################################################
kind: pipeline
name: corr/tezedge-alt-heads-011-hangzhou

trigger:
  branch:
    - master
    - develop

environment:
  SODIUM_USE_PKG_CONFIG: 1
  NETWORK: sandbox
  OCTEZ_NODE_1_RPC_CONTEXT_ROOT: http://octez-node-1:8732
  OCTEZ_NODE_2_RPC_CONTEXT_ROOT: http://octez-node-2:8732
  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-node:18732
  ACTIVATOR_SECRET: unencrypted:edsk31vznjHSSpGExDMHYASz45VZqXN4DPxvsa4hAyY8dHM28cZzp6
  BOOTSTRAP1_SECRET: unencrypted:edsk3JKD7xp7vfhVGeYLoS4SnJBzpnKs4CHpjPfzCditzaYvFh2XnK
  BOOTSTRAP2_SECRET: unencrypted:edsk4X3Fhd1GceD3XtB6RQmkNVkdgov5zyCfSgYh9icE8DsVbP4dGM
  BOOTSTRAP3_SECRET: unencrypted:edsk4KASiTWNfvfxUPK7d1mpNgu8dqGcPio9QsCMNVr9m7wXvhBjLF
  TEZOS_LOG: debug
  LWT_LOG: debug

steps:

- name: prepare-cache-dir
  image: alpine/git
  user: root
  commands:
    - mkdir -p drone-cache

- name: restore-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    restore: true
    debug: true
    backend: "sftp"
    cache_key: 'build-{{ .Build.Number }}'
    mount:
      - 'drone-cache' # <- builds a cache from this directory

- name: prepare-data
  image: alpine/git
  user: root
  volumes:
    - name: sandbox-data
      path: /data/sandbox
  commands:
    - mkdir -p /data/sandbox
    - mkdir -p /data/sandbox/tezos-client
    - echo /data/sandbox
    - cp drone-cache/sandbox_files/tezedge_drone_sandbox.config /data/sandbox
    - cp drone-cache/sandbox_files/sandbox-patch-context.json /data/sandbox
    - cp drone-cache/sandbox_files/011-hangzhou-protocol-parameters.json /data/sandbox

# run empty tezedge node and wait for it
- name: tezedge-node
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v11.0-octez
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: sandbox-data
      path: /data/sandbox
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    RUST_BACKTRACE: 1
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4}' > /data/sandbox/tezedge_ip.txt
    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
    - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$rust_libs"
    - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
    - drone-cache/build_files/light-node --config-file /data/sandbox/tezedge_drone_sandbox.config --identity-expected-pow 0.0 --identity-file /data/sandbox/tezedge/identity.json --tezos-data-dir /data/sandbox/tezedge/tezos-node --bootstrap-db-path /data/sandbox/tezedge/light-node --network sandbox --protocol-runner ./drone-cache/build_files/protocol-runner --disable-bootstrap-lookup --peer-thresh-high 2 --peer-thresh-low 1 --synchronization-thresh 0 --sandbox-patch-context-json-file /data/sandbox/sandbox-patch-context.json --log-level trace --ocaml-log-enabled true --init-sapling-spend-params-file ./drone-cache/build_files/ffi/sapling-spend.params --init-sapling-output-params-file ./drone-cache/build_files/ffi/sapling-output.params

- name: wait-for-tezedge-to-start
  image: tezedge/tezos-node-bootstrap:latest
  pull: if-not-exists
  commands:
    - tezos-node-bootstrap bootstrap --level=0 --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

# run empty octez sandbox and wait for it
- name: octez-node-1
  user: root
  image: tezos/tezos:v11-release
  detach: true
  volumes:
    - name: sandbox-data
      path: /data/sandbox
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4}' > /data/sandbox/octez1_ip.txt
    - export TEZOS_NODE_DIR=/data/sandbox/octez-1-data
    - mkdir -p $$TEZOS_NODE_DIR
    - tezos-node config init --network sandbox --net-addr 0.0.0.0:9732 --rpc-addr 0.0.0.0:8732 --allow-all-rpc 0.0.0.0:8732 --expected-pow 0.0 --connections 1
    - tezos-node identity generate
    - tezos-node run --sandbox /data/sandbox/sandbox-patch-context.json --no-bootstrap-peers --singleprocess --synchronisation-threshold 0 -vv

# run empty octez sandbox and wait for it
- name: octez-node-2
  user: root
  image: tezos/tezos:v11-release
  detach: true
  volumes:
    - name: sandbox-data
      path: /data/sandbox
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4}' > /data/sandbox/octez2_ip.txt
    - export TEZOS_NODE_DIR=/data/sandbox/octez-2-data
    - mkdir -p $$TEZOS_NODE_DIR
    - tezos-node config init --network sandbox --net-addr 0.0.0.0:9732 --rpc-addr 0.0.0.0:8732 --allow-all-rpc 0.0.0.0:8732 --expected-pow 0.0 --connections 1
    - tezos-node identity generate
    - tezos-node run --sandbox /data/sandbox/sandbox-patch-context.json --no-bootstrap-peers --singleprocess --synchronisation-threshold 0 -vv


- name: wait-for-octez-to-start
  image: tezedge/tezos-node-bootstrap:latest
  pull: if-not-exists
  commands:
    - tezos-node-bootstrap bootstrap --level=0 --nodes $${OCTEZ_NODE_1_RPC_CONTEXT_ROOT}  $${OCTEZ_NODE_2_RPC_CONTEXT_ROOT}

# inject protocol to octez node, means it creates the first block with level 1
- name: inject-first-block-with-tezos_client
  user: root
  image: tezos/tezos:v11-release
  volumes:
    - name: sandbox-data
      path: /data/sandbox
  commands:
    - tezos-client -E http://tezedge-node:18732 import secret key activator $${ACTIVATOR_SECRET}
    - tezos-client -E http://tezedge-node:18732 --block genesis activate protocol PtHangz2aRngywmSRGGvrcTyMbbdpWdpFKuS4uMWxg2RaH9i1qx  with fitness 1 and key activator and parameters /data/sandbox/011-hangzhou-protocol-parameters.json

# connect both nodes with tezos-admin-client
- name: connect-octez-and-tezedge
  user: root
  image: tezos/tezos:v11-release
  volumes:
    - name: sandbox-data
      path: /data/sandbox
  commands:
    - TEZEDGE_NODE_IP=$$(cat /data/sandbox/tezedge_ip.txt)
    - tezos-admin-client -E http://octez-node-1:8732 connect address $$TEZEDGE_NODE_IP:9732
    - tezos-admin-client -E http://octez-node-2:8732 connect address $$TEZEDGE_NODE_IP:9732
    - sleep 3
# TODO: instead of sleep 3, check status established
# TODO: write rpc test for check network/peers

# test checks if this block is synchronized to tezedge node through p2p
- name: wait-for-sync-on-level-1
  image: tezedge/tezos-node-bootstrap:latest
  pull: if-not-exists
  commands:
    - tezos-node-bootstrap bootstrap --level=1 --nodes $${OCTEZ_NODE_1_RPC_CONTEXT_ROOT} $${OCTEZ_NODE_2_RPC_CONTEXT_ROOT} $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

- name: run-tezos-endorser-011-PtHANG
  user: root
  detach: true
  image: tezos/tezos:v11-release
  volumes:
    - name: sandbox-data
      path: /data/sandbox
  commands:
    - tezos-client -E http://tezedge-node:18732 import secret key bootstrap3 $${BOOTSTRAP3_SECRET}
    - tezos-endorser-011-PtHangz2 -E http://tezedge-node:18732 --log-requests run bootstrap3

- name: check-endorsement-in-mempools
  user: root
  image: tezos/tezos:v11-release
  volumes:
    - name: sandbox-data
      path: /data/sandbox
  commands:
    - |
      set -xe
      apk add jq curl
      tezos-client -E http://tezedge-node:18732 import secret key bootstrap1 $${BOOTSTRAP1_SECRET}
      tezos-client -E http://tezedge-node:18732 import secret key bootstrap2 $${BOOTSTRAP2_SECRET}
      bake() {
          node=$1
          data_dir=$2
          address=$3
          tezos-client -E http://$node:8732 bake for $address --context $data_dir/context
      }
      bake_both() {
          bake octez-node-1 /data/sandbox/octez-1-data bootstrap1 &
          bake octez-node-2 /data/sandbox/octez-2-data bootstrap2 &
      }
      bake_one() {
          bake octez-node-1 /data/sandbox/octez-1-data bootstrap1 &
      }
      check_heads() {
          header1=$(curl -s http://octez-node-1:8732/chains/main/blocks/head/header)
          header2=$(curl -s http://octez-node-2:8732/chains/main/blocks/head/header)
          echo $header1 | jq
          echo $header2 | jq
          head1=$(echo $header1 | jq -r .hash)
          head2=$(echo $header2 | jq -r .hash)
          level1=$(echo $header1 | jq -r .level)
          level2=$(echo $header1 | jq -r .level)
          if [ "$level1" -ne "$level2" ]; then
              echo "ERROR: Different levels"
              exit 1
          fi
          test "$head1" = "$head2"
      }
      check_endorsement() {
          operations=$(curl -s http://tezedge-node:18732/chains/main/mempool/pending_operations)
          echo $operations | jq
          applied=$(echo $operations | jq '.applied | length')
          if [ "$applied" -ne 1 ]; then
              echo "FAIL: endorsement not found"
              exit 1
          fi
      }

      attempts=0
      tests=0
      while true; do
          bake_both
          sleep 3
          attempts=$((attempts+1))
          if check_heads; then
              echo "WARN: Same heads"
              continue
          fi
          if [ "$attempts" -ge 15 ]; then
              echo "ERROR: Cannot reproduce use case for $attempts attempts"
              exit 1
          fi
          tests=$((tests+1))
          check_endorsement
          if [ "$tests" -ge 5 ]; then
              exit
          fi
          bake_one
          sleep 3
          if check_heads; then
              true
          else
              echo "ERROR: Different heads"
              exit 1
          fi
      done

volumes:
  - name: sandbox-data
    temp: {}

depends_on:
  - build-tezedge-binaries


---
##############################################################################################################
# This pipeline runs tezedge node and octez node,
# which connects just to local octez nodes (does not connect to Internet to or any live node)
# and compares the rpc replies of both nodes to ensure compatibility.
# It also runs two tz-index indexers, one indexer is indexing from octez, one from tezedge, the indexed data is
# then compared
#
# GIVEN that we sync up a tezedge node from 3 ocaml nodes WHEN we execute the same rpcs on both nodes and
# and index a tz-index indexer for both of them THEN both nodes yields for the same rpc calls and the indexers
# yields the same results as well (indexer to be separated)
##############################################################################################################
kind: pipeline
name: corr/tezedge-octez-rpcs-and-indexers-compatibility-007-delphinet
# default build goes with: --network "delphinet"
# integration test is using env variables:
# - FROM_BLOCK_HEADER - block level, (watch out, if use change this, then check parameter --stop=)
# - TO_BLOCK_HEADER - block level (also is used by bootstrap task bootstrap)
# -- all headers in interval <FROM_BLOCK_HEADER, TO_BLOCK_HEADER) are checked in test (rpc json compare)
# - OCTEZ_NODE_RPC_CONTEXT_ROOT_1: running octez node, e.g.: http://octez-node-run-1:8732
# - OCTEZ_NODE_RPC_CONTEXT_ROOT_2: running octez node, e.g.: http://octez-node-run-2:8732
# - OCTEZ_NODE_RPC_CONTEXT_ROOT_3: running octez node, e.g.: http://octez-node-run-3:8732
# - TEZEDGE_NODE_RPC_CONTEXT_ROOT: running tezedge node, e.g.: http://tezedge-updated-node-run:18732

trigger:
  branch:
    - master
    - develop

environment:
  NETWORK: delphinet
  FROM_BLOCK_HEADER: 0
  TO_BLOCK_HEADER: 520 # also check parameter --stop=
  WRK_TEST_DURATION: 10  # in seconds
  SODIUM_USE_PKG_CONFIG: 1
  MAX_LATENCY_THRESHOLD: 100 # in %
  THROUGHPUTL_THRESHOLD: 10 # in %
  OCTEZ_NODE_RPC_CONTEXT_ROOT_1: http://octez-node-delphinet-run-1:8732
  OCTEZ_NODE_RPC_CONTEXT_ROOT_2: http://octez-node-delphinet-run-2:8732
  OCTEZ_NODE_RPC_CONTEXT_ROOT_3: http://octez-node-delphinet-run-3:8732
  OCTEZ_NODE_P2P_PEERS: octez-node-delphinet-run-1:9734,octez-node-delphinet-run-2:9734,octez-node-delphinet-run-3:9734
  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-updated-node-delphinet-run:18732
  TEZEDGE_NODE_TARGET_BRANCH_RPC_CONTEXT_ROOT: http://tezedge-old-node-delphinet-run:18732
  OCTEZ_NODE_INDEXER_ROOT: http://tz-indexer-delphinet-octez:8002
  TEZEDGE_NODE_INDEXER_ROOT: http://tz-indexer-delphinet-tezedge:8002

steps:

- name: prepare-cache-dir
  image: alpine/git
  user: root
  commands:
    - mkdir -p drone-cache

- name: restore-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    restore: true
    debug: true
    backend: "sftp"
    cache_key: 'build-{{ .Build.Number }}'
    mount:
      - 'drone-cache' # <- builds a cache from this directory

- name: prepare-data
  image: alpine/git
  user: root
  volumes:
    - name: cache
      path: /data/cache
  commands:
    - mkdir -p /data/cache

# just run octez 3 delphinet snapshoted nodes
- name: octez-node-delphinet-run-1
  user: root
  image: tezos/tezos:v8.2
  detach: true
  volumes:
    - name: octez-node-delphinet-snapshot-data-1
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > /data/cache/octez_ip1.txt
    - rm -f /home/tezos/data/lock
    - cp drone-cache/build_files/identities/identity_1.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: octez-node-delphinet-run-2
  user: root
  image: tezos/tezos:v8.2
  detach: true
  volumes:
    - name: octez-node-delphinet-snapshot-data-2
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > /data/cache/octez_ip2.txt
    - rm -f /home/tezos/data/lock
    - cp drone-cache/build_files/identities/identity_2.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: octez-node-delphinet-run-3
  user: root
  image: tezos/tezos:v8.2
  detach: true
  volumes:
    - name: octez-node-delphinet-snapshot-data-3
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > /data/cache/octez_ip3.txt
    - rm -f /home/tezos/data/lock
    - cp drone-cache/build_files/identities/identity_3.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: wait-for-octez-snapshoted-nodes
  image: tezedge/tezos-node-bootstrap:latest
  pull: if-not-exists
  commands:
    - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} $${OCTEZ_NODE_RPC_CONTEXT_ROOT_2} $${OCTEZ_NODE_RPC_CONTEXT_ROOT_3}

- name: tezedge-updated-node-delphinet-run
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v11.0-octez
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: cache
      path: /data/cache
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    DISABLE_INMEM_CONTEXT_GC: true
  commands:
    - cp drone-cache/build_files/protocol-runner /data/cache
    - PEERS=$(cat /data/cache/octez_ip1.txt | awk '{print $1 ","}')$(cat /data/cache/octez_ip2.txt | awk '{print $1 ","}')$(cat /data/cache/octez_ip3.txt)
    - echo "peers - $PEERS"
    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
    - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$rust_libs"
    - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
    - drone-cache/build_files/light-node --config-file "./drone-cache/build_files/tezedge/tezedge_drone.config" --disable-bootstrap-lookup --peers $PEERS --peer-thresh-low=3 --peer-thresh-high=5 --identity-file "./drone-cache/build_files/identities/identity_4.json" --network "$${NETWORK}" --protocol-runner "/data/cache/protocol-runner" --p2p-port 19732 --tezos-data-dir ./tezos-node-data --bootstrap-db-path ./light-node-data --init-sapling-spend-params-file ./drone-cache/build_files/ffi/sapling-spend.params --init-sapling-output-params-file ./drone-cache/build_files/ffi/sapling-output.params

- name: bootstrapping-tezedge
  image: tezedge/tezos-node-bootstrap:latest
  pull: if-not-exists
  commands:
    - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

# now we have prepared octez and tezedge node, that can run tests - rpc, wrk, indexer-test

# run both indexers on background to fill data
- name: tz-indexer-delphinet-tezedge
  image: blockwatch/tzindex:latest
  pull: always
  user: root
  detach: true
  volumes:
    - name: indexer-tezedge-data
      path: /data
  environment:
    TZ_RPC_HOST: tezedge-updated-node-delphinet-run
    TZ_RPC_PORT: 18732
    TZ_SERVER_ADDR: 0.0.0.0
    TZ_SERVER_PORT: 8002
    TZ_SERVER_CORS_ENABLE: true
    TZ_DATABASE_PATH: /data/index
    TZ_SNAPSHOT_PATH: /data/snapshots
  command: ["tzindex", "run", "--stop=521", "--notls"]

- name: tz-indexer-delphinet-octez
  image: blockwatch/tzindex:latest
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: indexer-octez-data
      path: /data
  environment:
    TZ_RPC_HOST: octez-node-delphinet-run-1
    TZ_RPC_PORT: 8732
    TZ_SERVER_ADDR: 0.0.0.0
    TZ_SERVER_PORT: 8002
    TZ_SERVER_CORS_ENABLE: true
    TZ_DATABASE_PATH: /data/index
    TZ_SNAPSHOT_PATH: /data/snapshots
  command: ["tzindex", "run", "--stop=521", "--notls"]

# compare all rpc's from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
- name: rpc-test
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v11.0-octez
  pull: if-not-exists
  user: root
  environment:
    RUST_BACKTRACE: 1
  commands:
    - export NODE_RPC_CONTEXT_ROOT_1=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1}
    - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$rust_libs"
    - export NODE_RPC_CONTEXT_ROOT_2=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
    - export IGNORE_PATH_PATTERNS=/operations_metadata_hash,/metadata_hash,/operation_metadata_hashes,/context/raw/bytes
    - drone-cache/tests/rpc_integration_test --nocapture --ignored --exact test_rpc_compare

# compare indexing from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
- name: indexer-test
  image: tezedge/tezos-node-bootstrap:latest
  pull: if-not-exists
  commands:
    - tezos-node-bootstrap indexer-test --level=$${TO_BLOCK_HEADER} --tezedge-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --tezedge-indexer=$${TEZEDGE_NODE_INDEXER_ROOT} --ocaml-node=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} --ocaml-indexer=$${OCTEZ_NODE_INDEXER_ROOT}

image_pull_secrets:
  - docker_pull_secret

volumes:
  - name: octez-node-delphinet-snapshot-data-1
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-delphinet-snapshot-data-1
  - name: octez-node-delphinet-snapshot-data-2
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-delphinet-snapshot-data-2
  - name: octez-node-delphinet-snapshot-data-3
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-delphinet-snapshot-data-3
  - name: cache
    temp: {}
  - name: indexer-tezedge-data
    temp: {}
  - name: indexer-octez-data
    temp: {}

depends_on:
  - build-tezedge-binaries

##############################################################################################################
# This pipeline runs tezedge node with edo2net configuration againts octez node with edo2net snapshot
# and compares the rpc replies of both nodes to ensure compatibility.
# It also runs two tz-index indexers, one indexer is indexing from octez, one from tezedge, the indexed data is
# then compared
#
# GIVEN that we sync up a tezedge node from 3 ocaml nodes WHEN we execute the same rpcs on both nodes and
# and index a tz-index indexer for both of them THEN both nodes yields for the same rpc calls and the indexers
# yields the same results as well (indexer to be separated)
##############################################################################################################
---
kind: pipeline
name: corr/tezedge-octez-rpcs-and-indexers-compatibility-008-edo2net

trigger:
  branch:
    - master
    - develop

environment:
  NETWORK: edo2net
  FROM_BLOCK_HEADER: 0
  TO_BLOCK_HEADER: 256 # also check parameter --stop=
  SODIUM_USE_PKG_CONFIG: 1
  OCTEZ_NODE_RPC_CONTEXT_ROOT_1: http://octez-node-edo2net-run-1:8732
  OCTEZ_NODE_RPC_CONTEXT_ROOT_2: http://octez-node-edo2net-run-2:8732
  OCTEZ_NODE_RPC_CONTEXT_ROOT_3: http://octez-node-edo2net-run-3:8732
  OCTEZ_NODE_P2P_PEERS: octez-node-edo2net-run-1:9734,octez-node-edo2net-run-2:9734,octez-node-edo2net-run-3:9734
  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-updated-node-edo2net-run:18732
  OCTEZ_NODE_INDEXER_ROOT: http://tz-indexer-edo2net-octez:8002
  TEZEDGE_NODE_INDEXER_ROOT: http://tz-indexer-edo2net-tezedge:8002

steps:

- name: prepare-cache-dir
  image: alpine/git
  user: root
  commands:
    - mkdir -p drone-cache

- name: restore-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    restore: true
    debug: true
    backend: "sftp"
    cache_key: 'build-{{ .Build.Number }}'
    mount:
      - 'drone-cache' # <- builds a cache from this directory

- name: prepare-data
  image: alpine/git
  user: root
  volumes:
    - name: cache
      path: /data/cache
  commands:
    - mkdir -p /data/cache

# just run octez 3 edo2net snapshoted nodes
- name: octez-node-edo2net-run-1
  user: root
  image: tezos/tezos:v9-release
  detach: true
  volumes:
    - name: octez-node-edo2net-snapshot-data-1
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > /data/cache/octez_ip1.txt
    - rm -f /home/tezos/data/lock
    - cp drone-cache/build_files/identities/identity_1.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: octez-node-edo2net-run-2
  user: root
  image: tezos/tezos:v9-release
  detach: true
  volumes:
    - name: octez-node-edo2net-snapshot-data-2
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > /data/cache/octez_ip2.txt
    - rm -f /home/tezos/data/lock
    - cp drone-cache/build_files/identities/identity_2.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: octez-node-edo2net-run-3
  user: root
  image: tezos/tezos:v9-release
  detach: true
  volumes:
    - name: octez-node-edo2net-snapshot-data-3
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > /data/cache/octez_ip3.txt
    - rm -f /home/tezos/data/lock
    - cp drone-cache/build_files/identities/identity_3.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: wait-for-octez-snapshoted-nodes
  image: tezedge/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} $${OCTEZ_NODE_RPC_CONTEXT_ROOT_2} $${OCTEZ_NODE_RPC_CONTEXT_ROOT_3}

- name: tezedge-updated-node-edo2net-run
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v11.0-octez
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: cache
      path: /data/cache
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    DISABLE_INMEM_CONTEXT_GC: true
  commands:
    - PEERS=$(cat /data/cache/octez_ip1.txt | awk '{print $1 ","}')$(cat /data/cache/octez_ip2.txt | awk '{print $1 ","}')$(cat /data/cache/octez_ip3.txt)
    - echo "peers - $PEERS"
    - cp drone-cache/build_files/protocol-runner /data/cache
    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
    - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$rust_libs"
    - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
    - drone-cache/build_files/light-node --config-file "./drone-cache/build_files/tezedge/tezedge_drone.config" --disable-bootstrap-lookup --peers $PEERS --peer-thresh-low=3 --peer-thresh-high=5 --identity-file "./drone-cache/build_files/identities/identity_4.json" --network "$${NETWORK}" --protocol-runner "/data/cache/protocol-runner" --p2p-port 19732 --init-sapling-spend-params-file ./drone-cache/build_files/ffi/sapling-spend.params --init-sapling-output-params-file ./drone-cache/build_files/ffi/sapling-output.params

- name: bootstrapping-tezedge
  image: tezedge/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

# now we have prepared octez and tezedge node, that can run tests - rpc, wrk, indexer-test

# run both indexers on background to fill data
- name: tz-indexer-edo2net-tezedge
  image: blockwatch/tzindex:latest
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: indexer-tezedge-data
      path: /data
  environment:
    TZ_RPC_HOST: tezedge-updated-node-edo2net-run
    TZ_RPC_PORT: 18732
    TZ_SERVER_ADDR: 0.0.0.0
    TZ_SERVER_PORT: 8002
    TZ_SERVER_CORS_ENABLE: true
    TZ_DATABASE_PATH: /data/index
    TZ_SNAPSHOT_PATH: /data/snapshots
  command: ["tzindex", "run", "--stop=257", "--notls"]

- name: tz-indexer-edo2net-octez
  image: blockwatch/tzindex:latest
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: indexer-octez-data
      path: /data
  environment:
    TZ_RPC_HOST: octez-node-edo2net-run-1
    TZ_RPC_PORT: 8732
    TZ_SERVER_ADDR: 0.0.0.0
    TZ_SERVER_PORT: 8002
    TZ_SERVER_CORS_ENABLE: true
    TZ_DATABASE_PATH: /data/index
    TZ_SNAPSHOT_PATH: /data/snapshots
  command: ["tzindex", "run", "--stop=257", "--notls"]

# compare all rpc's from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
- name: rpc-test
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v11.0-octez
  pull: if-not-exists
  user: root
  environment:
    RUST_BACKTRACE: 1
  commands:
    - export NODE_RPC_CONTEXT_ROOT_1=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1}
    - export NODE_RPC_CONTEXT_ROOT_2=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
    - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$rust_libs"
    - export IGNORE_PATH_PATTERNS=/context/raw/bytes
    - drone-cache/tests/rpc_integration_test --nocapture --ignored --exact test_rpc_compare

# compare indexing from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
- name: indexer-test
  image: tezedge/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap indexer-test --level=$${TO_BLOCK_HEADER} --tezedge-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --tezedge-indexer=$${TEZEDGE_NODE_INDEXER_ROOT} --ocaml-node=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} --ocaml-indexer=$${OCTEZ_NODE_INDEXER_ROOT}

volumes:
  - name: octez-node-edo2net-snapshot-data-1
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-edo2net-snapshot-data-1
  - name: octez-node-edo2net-snapshot-data-2
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-edo2net-snapshot-data-2
  - name: octez-node-edo2net-snapshot-data-3
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-edo2net-snapshot-data-3
  - name: cache
    temp: {}
  - name: indexer-tezedge-data
    temp: {}
  - name: indexer-octez-data
    temp: {}

depends_on:
  - build-tezedge-binaries

##############################################################################################################
# This pipeline runs tezedge node with florencenet configuration againts octez node with florencenet snapshot
# and compares the rpc replies of both nodes to ensure compatibility.
# It also runs two tz-index indexers, one indexer is indexing from octez, one from tezedge, the indexed data is
# then compared
#
# GIVEN that we sync up a tezedge node from 3 ocaml nodes WHEN we execute the same rpcs on both nodes and
# and index a tz-index indexer for both of them THEN both nodes yields for the same rpc calls and the indexers
# yields the same results as well (indexer to be separated)
##############################################################################################################
---
kind: pipeline
name: corr/tezedge-octez-rpcs-and-indexers-compatibility-009-florencenet

trigger:
  branch:
    - master
    - develop

environment:
  NETWORK: florencenet
  FROM_BLOCK_HEADER: 0
  TO_BLOCK_HEADER: 600 # also check parameter --stop=
  SODIUM_USE_PKG_CONFIG: 1
  OCTEZ_NODE_RPC_CONTEXT_ROOT_1: http://octez-node-florencenet-run-1:8732
  OCTEZ_NODE_RPC_CONTEXT_ROOT_2: http://octez-node-florencenet-run-2:8732
  OCTEZ_NODE_RPC_CONTEXT_ROOT_3: http://octez-node-florencenet-run-3:8732
  OCTEZ_NODE_P2P_PEERS: octez-node-florencenet-run-1:9734,octez-node-florencenet-run-2:9734,octez-node-florencenet-run-3:9734
  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-updated-node-florencenet-run:18732
  OCTEZ_NODE_INDEXER_ROOT: http://tz-indexer-florencenet-octez:8002
  TEZEDGE_NODE_INDEXER_ROOT: http://tz-indexer-florencenet-tezedge:8002

steps:

- name: prepare-cache-dir
  image: alpine/git
  user: root
  commands:
    - mkdir -p drone-cache

- name: restore-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    restore: true
    debug: true
    backend: "sftp"
    cache_key: 'build-{{ .Build.Number }}'
    mount:
      - 'drone-cache' # <- builds a cache from this directory

- name: prepare-data
  image: alpine/git
  user: root
  volumes:
    - name: cache
      path: /data/cache
  commands:
    - mkdir -p /data/cache

# just run octez 3 florencenet snapshoted nodes
- name: octez-node-florencenet-run-1
  user: root
  image: tezos/tezos:v9-release
  detach: true
  volumes:
    - name: octez-node-florencenet-snapshot-data-1
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > /data/cache/octez_ip1.txt
    - rm -f /home/tezos/data/lock
    - cp drone-cache/build_files/identities/identity_1.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: octez-node-florencenet-run-2
  user: root
  image: tezos/tezos:v9-release
  detach: true
  volumes:
    - name: octez-node-florencenet-snapshot-data-2
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > /data/cache/octez_ip2.txt
    - rm -f /home/tezos/data/lock
    - cp drone-cache/build_files/identities/identity_2.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: octez-node-florencenet-run-3
  user: root
  image: tezos/tezos:v9-release
  detach: true
  volumes:
    - name: octez-node-florencenet-snapshot-data-3
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > /data/cache/octez_ip3.txt
    - rm -f /home/tezos/data/lock
    - cp drone-cache/build_files/identities/identity_3.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: wait-for-octez-snapshoted-nodes
  image: tezedge/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} $${OCTEZ_NODE_RPC_CONTEXT_ROOT_2} $${OCTEZ_NODE_RPC_CONTEXT_ROOT_3}

- name: tezedge-updated-node-florencenet-run
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v11.0-octez
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: cache
      path: /data/cache
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    DISABLE_INMEM_CONTEXT_GC: true
  commands:
    - PEERS=$(cat /data/cache/octez_ip1.txt | awk '{print $1 ","}')$(cat /data/cache/octez_ip2.txt | awk '{print $1 ","}')$(cat /data/cache/octez_ip3.txt)
    - echo "peers - $PEERS"
    - cp drone-cache/build_files/protocol-runner /data/cache
    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
    - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$rust_libs"
    - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
    - drone-cache/build_files/light-node --config-file "./drone-cache/build_files/tezedge/tezedge_drone.config" --disable-bootstrap-lookup --peers $PEERS --peer-thresh-low=3 --peer-thresh-high=5 --identity-file "./drone-cache/build_files/identities/identity_4.json" --network "$${NETWORK}" --protocol-runner "/data/cache/protocol-runner" --p2p-port 19732 --init-sapling-spend-params-file ./drone-cache/build_files/ffi/sapling-spend.params --init-sapling-output-params-file ./drone-cache/build_files/ffi/sapling-output.params

- name: bootstrapping-tezedge
  image: tezedge/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

# now we have prepared octez and tezedge node, that can run tests - rpc, wrk, indexer-test

# run both indexers on background to fill data
- name: tz-indexer-florencenet-tezedge
  image: blockwatch/tzindex:latest
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: indexer-tezedge-data
      path: /data
  environment:
    TZ_RPC_HOST: tezedge-updated-node-florencenet-run
    TZ_RPC_PORT: 18732
    TZ_SERVER_ADDR: 0.0.0.0
    TZ_SERVER_PORT: 8002
    TZ_SERVER_CORS_ENABLE: true
    TZ_DATABASE_PATH: /data/index
    TZ_SNAPSHOT_PATH: /data/snapshots
  command: ["tzindex", "run", "--stop=601", "--notls"]

- name: tz-indexer-florencenet-octez
  image: blockwatch/tzindex:latest
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: indexer-octez-data
      path: /data
  environment:
    TZ_RPC_HOST: octez-node-florencenet-run-1
    TZ_RPC_PORT: 8732
    TZ_SERVER_ADDR: 0.0.0.0
    TZ_SERVER_PORT: 8002
    TZ_SERVER_CORS_ENABLE: true
    TZ_DATABASE_PATH: /data/index
    TZ_SNAPSHOT_PATH: /data/snapshots
  command: ["tzindex", "run", "--stop=601", "--notls"]

# compare all rpc's from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
- name: rpc-test
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v11.0-octez
  pull: if-not-exists
  user: root
  environment:
    RUST_BACKTRACE: 1
  commands:
    - export NODE_RPC_CONTEXT_ROOT_1=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1}
    - export NODE_RPC_CONTEXT_ROOT_2=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
    - export IGNORE_PATH_PATTERNS=/context/raw/bytes
    - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$rust_libs"
    - drone-cache/tests/rpc_integration_test --nocapture --ignored --exact test_rpc_compare

# compare indexing from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
- name: indexer-test
  image: tezedge/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap indexer-test --level=$${TO_BLOCK_HEADER} --tezedge-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --tezedge-indexer=$${TEZEDGE_NODE_INDEXER_ROOT} --ocaml-node=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} --ocaml-indexer=$${OCTEZ_NODE_INDEXER_ROOT}

volumes:
  - name: octez-node-florencenet-snapshot-data-1
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-florencenet-snapshot-data-1
  - name: octez-node-florencenet-snapshot-data-2
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-florencenet-snapshot-data-2
  - name: octez-node-florencenet-snapshot-data-3
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-florencenet-snapshot-data-3
  - name: cache
    temp: {}
  - name: indexer-tezedge-data
    temp: {}
  - name: indexer-octez-data
    temp: {}

depends_on:
  - build-tezedge-binaries

##############################################################################################################
# This pipeline runs tezedge node with granadanet configuration againts octez node with granadanet snapshot
# and compares the rpc replies of both nodes to ensure compatibility.
# It also runs two tz-index indexers, one indexer is indexing from octez, one from tezedge, the indexed data is
# then compared
#
# GIVEN that we sync up a tezedge node from 3 ocaml nodes WHEN we execute the same rpcs on both nodes and
# and index a tz-index indexer for both of them THEN both nodes yields for the same rpc calls and the indexers
# yields the same results as well (indexer to be separated)
##############################################################################################################
---
kind: pipeline
name: corr/tezedge-octez-rpcs-and-indexers-compatibility-010-granadanet

trigger:
  branch:
    - master
    - develop

environment:
  NETWORK: granadanet
  FROM_BLOCK_HEADER: 4050 # 4096-4097 is florence-granada proto switch
  TO_BLOCK_HEADER: 5000 # also check parameter --stop=
  TO_BLOCK_HEADER_LATEST: 10000
  SODIUM_USE_PKG_CONFIG: 1
  OCTEZ_NODE_RPC_CONTEXT_ROOT_1: http://octez-node-granadanet-run-1:8732
  OCTEZ_NODE_RPC_CONTEXT_ROOT_2: http://octez-node-granadanet-run-2:8732
  OCTEZ_NODE_RPC_CONTEXT_ROOT_3: http://octez-node-granadanet-run-3:8732
  OCTEZ_NODE_P2P_PEERS: octez-node-granadanet-run-1:9734,octez-node-granadanet-run-2:9734,octez-node-granadanet-run-3:9734
  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-updated-node-granadanet-run:18732
  OCTEZ_NODE_INDEXER_ROOT: http://tz-indexer-granadanet-octez:8002
  TEZEDGE_NODE_INDEXER_ROOT: http://tz-indexer-granadanet-tezedge:8002

steps:

- name: prepare-cache-dir
  image: alpine/git
  user: root
  commands:
    - mkdir -p drone-cache

- name: restore-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    restore: true
    debug: true
    backend: "sftp"
    cache_key: 'build-{{ .Build.Number }}'
    mount:
      - 'drone-cache' # <- builds a cache from this directory

- name: prepare-data
  image: alpine/git
  user: root
  volumes:
    - name: cache
      path: /data/cache
  commands:
    - mkdir -p /data/cache

# just run octez 3 granadanet snapshoted nodes
- name: octez-node-granadanet-run-1
  user: root
  image: tezos/tezos:v9-release
  detach: true
  volumes:
    - name: octez-node-granadanet-snapshot-data-1
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > /data/cache/octez_ip1.txt
    - rm -f /home/tezos/data/lock
    - cp drone-cache/build_files/identities/identity_1.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: octez-node-granadanet-run-2
  user: root
  image: tezos/tezos:v9-release
  detach: true
  volumes:
    - name: octez-node-granadanet-snapshot-data-2
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > /data/cache/octez_ip2.txt
    - rm -f /home/tezos/data/lock
    - cp drone-cache/build_files/identities/identity_2.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: octez-node-granadanet-run-3
  user: root
  image: tezos/tezos:v9-release
  detach: true
  volumes:
    - name: octez-node-granadanet-snapshot-data-3
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > /data/cache/octez_ip3.txt
    - rm -f /home/tezos/data/lock
    - cp drone-cache/build_files/identities/identity_3.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: wait-for-octez-snapshoted-nodes
  image: tezedge/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} $${OCTEZ_NODE_RPC_CONTEXT_ROOT_2} $${OCTEZ_NODE_RPC_CONTEXT_ROOT_3}

- name: tezedge-updated-node-granadanet-run
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v11.0-octez
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: cache
      path: /data/cache
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    DISABLE_INMEM_CONTEXT_GC: true
  commands:
    - PEERS=$(cat /data/cache/octez_ip1.txt | awk '{print $1 ","}')$(cat /data/cache/octez_ip2.txt | awk '{print $1 ","}')$(cat /data/cache/octez_ip3.txt)
    - echo "peers - $PEERS"
    - cp drone-cache/build_files/protocol-runner /data/cache
    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
    - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$rust_libs"
    - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
    - drone-cache/build_files/light-node --config-file "./drone-cache/build_files/tezedge/tezedge_drone.config" --disable-bootstrap-lookup --peers $PEERS --peer-thresh-low=3 --peer-thresh-high=5 --identity-file "./drone-cache/build_files/identities/identity_4.json" --network "$${NETWORK}" --protocol-runner "/data/cache/protocol-runner" --p2p-port 19732 --init-sapling-spend-params-file ./drone-cache/build_files/ffi/sapling-spend.params --init-sapling-output-params-file ./drone-cache/build_files/ffi/sapling-output.params

- name: tezos-client-bootstrapped-for-tezedge-node
  user: root
  image: tezos/tezos:v9-release
  detach: true
  volumes:
    - name: cache
      path: /data/cache
  commands:
    - |
      for i in $(seq 1 12); do
          if tezos-client -E $${TEZEDGE_NODE_RPC_CONTEXT_ROOT} bootstrapped > /data/cache/tezedge-node-bootstrapped.log; then
              cp /dev/null /data/cache/tezedge-node-bootstrapped.done
              break
          fi
          sleep 5
      done

- name: bootstrapping-tezedge
  image: tezedge/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

# now we have prepared octez and tezedge node, that can run tests - rpc, wrk, indexer-test

# run both indexers on background to fill data
- name: tz-indexer-granadanet-tezedge
  image: blockwatch/tzindex:latest
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: indexer-tezedge-data
      path: /data
  environment:
    TZ_RPC_HOST: tezedge-updated-node-granadanet-run
    TZ_RPC_PORT: 18732
    TZ_SERVER_ADDR: 0.0.0.0
    TZ_SERVER_PORT: 8002
    TZ_SERVER_CORS_ENABLE: true
    TZ_DATABASE_PATH: /data/index
    TZ_SNAPSHOT_PATH: /data/snapshots
  command: ["tzindex", "run", "--stop=5001", "--notls"]

- name: tz-indexer-granadanet-octez
  image: blockwatch/tzindex:latest
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: indexer-octez-data
      path: /data
  environment:
    TZ_RPC_HOST: octez-node-granadanet-run-1
    TZ_RPC_PORT: 8732
    TZ_SERVER_ADDR: 0.0.0.0
    TZ_SERVER_PORT: 8002
    TZ_SERVER_CORS_ENABLE: true
    TZ_DATABASE_PATH: /data/index
    TZ_SNAPSHOT_PATH: /data/snapshots
  command: ["tzindex", "run", "--stop=5001", "--notls"]

# compare all rpc's from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
- name: rpc-test
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v11.0-octez
  pull: if-not-exists
  user: root
  environment:
    RUST_BACKTRACE: 1
  commands:
    - export NODE_RPC_CONTEXT_ROOT_1=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1}
    - export NODE_RPC_CONTEXT_ROOT_2=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
    - export IGNORE_PATH_PATTERNS=/context/raw/bytes,/live_blocks
    - export IGNORE_JSON_PROPERTIES=max_operations_ttl
    - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$rust_libs"
    - drone-cache/tests/rpc_integration_test --nocapture --ignored --exact test_rpc_compare

# compare indexing from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
- name: indexer-test
  image: tezedge/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap indexer-test --level=$${TO_BLOCK_HEADER} --tezedge-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --tezedge-indexer=$${TEZEDGE_NODE_INDEXER_ROOT} --ocaml-node=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} --ocaml-indexer=$${OCTEZ_NODE_INDEXER_ROOT}

- name: bootstrapping-tezedge-latest
  image: tezedge/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER_LATEST} --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}


- name: bootstrapped-rpc-check
  user: root
  image: tezos/tezos:v9-release
  volumes:
    - name: cache
      path: /data/cache
  commands:
    - test -f /data/cache/tezedge-node-bootstrapped.done
    - grep -F "Waiting for the node to be bootstrapped..." -q /data/cache/tezedge-node-bootstrapped.log
    - >-
      grep -F "Current head: BKyjtcb7VhJf" -q /data/cache/tezedge-node-bootstrapped.log
    - grep -F "Node is bootstrapped." -q /data/cache/tezedge-node-bootstrapped.log

volumes:
  - name: octez-node-granadanet-snapshot-data-1
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1
  - name: octez-node-granadanet-snapshot-data-2
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-2
  - name: octez-node-granadanet-snapshot-data-3
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-3
  - name: cache
    temp: {}
  - name: indexer-tezedge-data
    temp: {}
  - name: indexer-octez-data
    temp: {}

depends_on:
  - build-tezedge-binaries

##############################################################################################################
# This pipeline runs tezedge node with mainnet configuration againts octez node with mainnet snapshot
# and compares the rpc replies of both nodes to ensure compatibility.
# It also runs two tz-index indexers, one indexer is indexing from octez, one from tezedge, the indexed data is
# then compared
#
# GIVEN that we sync up a tezedge node from 3 ocaml nodes WHEN we execute the same rpcs on both nodes and
# and index a tz-index indexer for both of them THEN both nodes yields for the same rpc calls and the indexers
# yields the same results as well (indexer to be separated)
##############################################################################################################
---
kind: pipeline
name: corr/tezedge-octez-rpcs-and-indexers-compatibility-mainnet

trigger:
  branch:
    # TODO: disabled for now because of the RPC test getting stuck in the rights RPC call
    - x_master
    - x_develop

environment:
  NETWORK: mainnet
  FROM_BLOCK_HEADER: 0
  TO_BLOCK_HEADER: 130 # also check parameter --stop=
  TO_BLOCK_HEADER_FOR_RPC: 3
  SODIUM_USE_PKG_CONFIG: 1
  OCTEZ_NODE_RPC_CONTEXT_ROOT_1: http://octez-node-mainnet-run-1:8732
  OCTEZ_NODE_RPC_CONTEXT_ROOT_2: http://octez-node-mainnet-run-2:8732
  OCTEZ_NODE_RPC_CONTEXT_ROOT_3: http://octez-node-mainnet-run-3:8732
  OCTEZ_NODE_P2P_PEERS: octez-node-mainnet-run-1:9734,octez-node-mainnet-run-2:9734,octez-node-mainnet-run-3:9734
  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-updated-node-mainnet-run:18732
  OCTEZ_NODE_INDEXER_ROOT: http://tz-indexer-mainnet-octez:8002
  TEZEDGE_NODE_INDEXER_ROOT: http://tz-indexer-mainnet-tezedge:8002

steps:

- name: prepare-cache-dir
  image: alpine/git
  user: root
  commands:
    - mkdir -p drone-cache

- name: restore-cache
  image: meltwater/drone-cache
  pull: true
  environment:
    SFTP_USERNAME:
      from_secret: sftp_username
    SFTP_PASSWORD:
      from_secret: sftp_password
    SFTP_AUTH_METHOD: PASSWORD
    SFTP_HOST: 65.21.119.66
    SFTP_PORT: 22
    SFTP_CACHE_ROOT: "/upload"
  settings:
    restore: true
    debug: true
    backend: "sftp"
    cache_key: 'build-{{ .Build.Number }}'
    mount:
      - 'drone-cache' # <- builds a cache from this directory

- name: prepare-data
  image: alpine/git
  user: root
  volumes:
    - name: cache
      path: /data/cache
  commands:
    - mkdir -p /data/cache

# just run octez 3 mainnet snapshoted nodes
- name: octez-node-mainnet-run-1
  user: root
  image: tezos/tezos:v11-release
  detach: true
  volumes:
    - name: octez-node-mainnet-snapshot-data-upgraded-1
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > /data/cache/octez_ip1.txt
    - rm -f /home/tezos/data/lock
    - cp drone-cache/build_files/identities/identity_1.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --allow-all-rpc 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: octez-node-mainnet-run-2
  user: root
  image: tezos/tezos:v11-release
  detach: true
  volumes:
    - name: octez-node-mainnet-snapshot-data-upgraded-2
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > /data/cache/octez_ip2.txt
    - rm -f /home/tezos/data/lock
    - cp drone-cache/build_files/identities/identity_2.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --allow-all-rpc 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: octez-node-mainnet-run-3
  user: root
  image: tezos/tezos:v11-release
  detach: true
  volumes:
    - name: octez-node-mainnet-snapshot-data-upgraded-3
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > /data/cache/octez_ip3.txt
    - rm -f /home/tezos/data/lock
    - cp drone-cache/build_files/identities/identity_3.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --allow-all-rpc 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: wait-for-octez-snapshoted-nodes
  image: tezedge/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} $${OCTEZ_NODE_RPC_CONTEXT_ROOT_2} $${OCTEZ_NODE_RPC_CONTEXT_ROOT_3}

- name: tezedge-updated-node-mainnet-run
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v11.0-octez
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: cache
      path: /data/cache
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    DISABLE_INMEM_CONTEXT_GC: true
  commands:
    - PEERS=$(cat /data/cache/octez_ip1.txt | awk '{print $1 ","}')$(cat /data/cache/octez_ip2.txt | awk '{print $1 ","}')$(cat /data/cache/octez_ip3.txt)
    - echo "peers - $PEERS"
    - cp drone-cache/build_files/protocol-runner /data/cache
    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
    - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$rust_libs"
    - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
    - drone-cache/build_files/light-node --config-file "./drone-cache/build_files/tezedge/tezedge_drone.config" --disable-bootstrap-lookup --peers $PEERS --peer-thresh-low=3 --peer-thresh-high=5 --identity-file "./drone-cache/build_files/identities/identity_4.json" --network "$${NETWORK}" --protocol-runner "/data/cache/protocol-runner" --p2p-port 19732 --init-sapling-spend-params-file ./drone-cache/build_files/ffi/sapling-spend.params --init-sapling-output-params-file ./drone-cache/build_files/ffi/sapling-output.params --log-level debug

- name: bootstrapping-tezedge
  image: tezedge/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

# now we have prepared octez and tezedge node, that can run tests - rpc, wrk, indexer-test

# run both indexers on background to fill data
- name: tz-indexer-mainnet-tezedge
  image: blockwatch/tzindex:latest
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: indexer-tezedge-data
      path: /data
  environment:
    TZ_RPC_HOST: tezedge-updated-node-mainnet-run
    TZ_RPC_PORT: 18732
    TZ_SERVER_ADDR: 0.0.0.0
    TZ_SERVER_PORT: 8002
    TZ_SERVER_CORS_ENABLE: true
    TZ_DATABASE_PATH: /data/index
    TZ_SNAPSHOT_PATH: /data/snapshots
  command: ["tzindex", "run", "--stop=131", "--notls"]

- name: tz-indexer-mainnet-octez
  image: blockwatch/tzindex:latest
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: indexer-octez-data
      path: /data
  environment:
    TZ_RPC_HOST: octez-node-mainnet-run-1
    TZ_RPC_PORT: 8732
    TZ_SERVER_ADDR: 0.0.0.0
    TZ_SERVER_PORT: 8002
    TZ_SERVER_CORS_ENABLE: true
    TZ_DATABASE_PATH: /data/index
    TZ_SNAPSHOT_PATH: /data/snapshots
  command: ["tzindex", "run", "--stop=131", "--notls"]

# compare all rpc's from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
- name: rpc-test
  image: tezedge/tezedge-ci-builder:rust-1.58.1-v11.0-octez
  pull: if-not-exists
  user: root
  environment:
    RUST_BACKTRACE: 1
  commands:
    - export NODE_RPC_CONTEXT_ROOT_1=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1}
    - export NODE_RPC_CONTEXT_ROOT_2=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
    - export LD_LIBRARY_PATH="drone-cache/build_files/ffi:$rust_libs"
    - export IGNORE_PATH_PATTERNS=votes/listings,/minimal_valid_time,/operations_metadata_hash,/metadata_hash,/operation_metadata_hashes,/context/raw/bytes
    # mainnet rpcs of protocol 001 are too slow
    - export TO_BLOCK_HEADER=$${TO_BLOCK_HEADER_FOR_RPC}
    - drone-cache/tests/rpc_integration_test --nocapture --ignored --exact test_rpc_compare

# compare indexing from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
- name: indexer-test
  image: tezedge/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap indexer-test --level=$${TO_BLOCK_HEADER} --tezedge-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --tezedge-indexer=$${TEZEDGE_NODE_INDEXER_ROOT} --ocaml-node=$${OCTEZ_NODE_RPC_CONTEXT_ROOT_1} --ocaml-indexer=$${OCTEZ_NODE_INDEXER_ROOT}

volumes:
  - name: octez-node-mainnet-snapshot-data-upgraded-1
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-mainnet-snapshot-data-upgraded-1
  - name: octez-node-mainnet-snapshot-data-upgraded-2
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-mainnet-snapshot-data-upgraded-2
  - name: octez-node-mainnet-snapshot-data-upgraded-3
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-mainnet-snapshot-data-upgraded-3
  - name: cache
    temp: {}
  - name: indexer-tezedge-data
    temp: {}
  - name: indexer-octez-data
    temp: {}

depends_on:
  - build-tezedge-binaries
